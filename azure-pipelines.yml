# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

# trigger:
# - main

pr:
  branches:
    include:
    - feature/*

pool:
  vmImage: ubuntu-latest


steps:
- checkout: self
  persistCredentials: true

- script: |
    env
    ls -lha

    git config --global user.email "service@ackcloud.com"
    git config --global user.name "service"
    git fetch origin ${BRANCH_NAME}:${BRANCH_NAME}
    export SHORT_COMMIT=$(git rev-parse --short ${BRANCH_NAME})
    export MANIFEST=./environments/dev/engineering/test-api.values.yaml

    git checkout ${BRANCH_NAME}

    echo "./scripts/bash/set-release.sh ${BRANCH_NAME} ${SHORT_COMMIT} ${BUILD_ID} ${MANIFEST}"
    ./scripts/bash/set-release.sh ${BRANCH_NAME} ${SHORT_COMMIT} ${BUILD_ID} ${MANIFEST}

    git --no-pager diff
    git add --all
    git status
    git commit -m "[skip ci]: update reference to ${BRANCH_NAME} ${SHORT_COMMIT} ${BUILD_ID} ${MANIFEST}"
    git push origin main

  workingDirectory: argocd-simplified
  displayName: 'Change manifest'

- script: |
    curl -sSL -o argocd-linux-amd64 https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
    install -m 555 argocd-linux-amd64 /usr/local/bin/argocd
    rm argocd-linux-amd64

    argocd app sync ${APP_NAME} --server ${ARGOCD_SERVER} --auth-token ${ARGOCD_TOKEN} --grpc-web --prune
    argocd app wait ${APP_NAME} --server ${ARGOCD_SERVER} --auth-token ${ARGOCD_TOKEN} --grpc-web --operation

  displayName: 'Sync ArgoCD'

- checkout: self
  clean: true

variables:
  ARGOCD_SERVER: localhost:8888
  APP_NAME: test-api-dev
  BRANCH_NAME: $[replace(variables['Build.SourceBranch'], 'refs/heads/', '')]
  BUILD_ID: $[variables['Build.BuildNumber']]
